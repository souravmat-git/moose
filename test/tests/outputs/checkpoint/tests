[Tests]
  issues = '#1927'
  design ='outputs/Checkpoint.md'

  [interval]
    requirement = "The system shall support outputting of checkpoint files:"
    issues = '#1927 #2395'

    [test_files]
      type = 'CheckFiles'
      input = 'checkpoint_interval.i'
      check_files =      'checkpoint_interval_out_cp/0006-restart-0.rd/data '
                         'checkpoint_interval_out_cp/0006-restart-0.rd/header '
                         'checkpoint_interval_out_cp/0006-mesh.cpr/1/header.cpr '
                         'checkpoint_interval_out_cp/0006-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_interval_out_cp/0006-mesh.cpr/meta_data_mesh.rd/data '
                         'checkpoint_interval_out_cp/0006-mesh.cpr/meta_data_mesh.rd/header '
                         'checkpoint_interval_out_cp/0009-restart-0.rd/data '
                         'checkpoint_interval_out_cp/0009-restart-0.rd/header '
                         'checkpoint_interval_out_cp/0009-mesh.cpr/1/header.cpr '
                         'checkpoint_interval_out_cp/0009-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_interval_out_cp/0009-mesh.cpr/meta_data_mesh.rd/data '
                         'checkpoint_interval_out_cp/0009-mesh.cpr/meta_data_mesh.rd/header'
      check_not_exists = 'checkpoint_interval_out_cp/0003-restart-0.rd '
                         'checkpoint_interval_out_cp/0003-mesh.cpr/1/header.cpr '
                         'checkpoint_interval_out_cp/0003-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_interval_out_cp/0003-mesh.cpr/meta_data_mesh.rd '
                         'checkpoint_interval_out_cp/0007-restart-0.rd '
                         'checkpoint_interval_out_cp/0007-mesh.cpr/1/header.cpr '
                         'checkpoint_interval_out_cp/0007-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_interval_out_cp/0007-mesh.cpr/meta_data_mesh.rd '
                         'checkpoint_interval_out_cp/0008-restart-0.rd '
                         'checkpoint_interval_out_cp/0008-mesh.cpr/1/header.cpr '
                         'checkpoint_interval_out_cp/0008-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_interval_out_cp/0008-mesh.cpr/meta_data_mesh.rd '
                         'checkpoint_interval_out_cp/0010-restart-0.rd '
                         'checkpoint_interval_out_cp/0010-mesh.cpr/1/header.cpr '
                         'checkpoint_interval_out_cp/0010-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_interval_out_cp/0010-mesh.cpr/meta_data_mesh.rd'
      recover = false

      # The suffixes of these files change when running in parallel or with threads
      max_parallel = 1
      max_threads = 1
      detail = "at a specific interval while only maintaining a specified number of recent files and"
    []

    [test_recover]
      # This test verifies that we can restart for a solution that may not be
      # the most recent one written to the output file.
      type = 'Exodiff'
      input = 'checkpoint_interval.i'
      exodiff = 'checkpoint_interval_out.e'
      delete_output_before_running = false
      prereq = 'interval/test_files'
      cli_args = '--recover'
      expect_out = 'Using checkpoint_interval_out_cp/0009 for recovery'
      recover = false
      max_parallel = 1
      max_threads = 1
      detail = "be capable of restarting a simulation from previously exported data at this interval."
    []
  []

  [default]
    requirement = "The system shall support outputting of checkpoint files, using a simplified input format:"
    [recover_half_transient]
      type = CheckFiles
      input = checkpoint.i
      cli_args = 'Outputs/checkpoint=true --half-transient'
      recover = false

      check_files =      'checkpoint_out_cp/0004-restart-0.rd/data '
                         'checkpoint_out_cp/0004-restart-0.rd/header '
                         'checkpoint_out_cp/0004-mesh.cpr/1/header.cpr '
                         'checkpoint_out_cp/0004-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_out_cp/0004-mesh.cpr/meta_data_mesh.rd/data '
                         'checkpoint_out_cp/0004-mesh.cpr/meta_data_mesh.rd/header '
                         'checkpoint_out_cp/0005-restart-0.rd/data '
                         'checkpoint_out_cp/0005-restart-0.rd/header '
                         'checkpoint_out_cp/0005-mesh.cpr/1/header.cpr '
                         'checkpoint_out_cp/0005-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_out_cp/0005-mesh.cpr/meta_data_mesh.rd/data '
                         'checkpoint_out_cp/0005-mesh.cpr/meta_data_mesh.rd/header'
      check_not_exists = 'checkpoint_out_cp/0001-restart-0.rd '
                         'checkpoint_out_cp/0001-mesh.cpr/1/header.cpr '
                         'checkpoint_out_cp/0001-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_out_cp/0001-mesh.cpr/meta_data_mesh.rd '
                         'checkpoint_out_cp/0002-restart-0.rd '
                         'checkpoint_out_cp/0002-mesh.cpr/1/header.cpr '
                         'checkpoint_out_cp/0002-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_out_cp/0002-mesh.cpr/meta_data_mesh.rd '
                         'checkpoint_out_cp/0003-restart-0.rd '
                         'checkpoint_out_cp/0003-mesh.cpr/1/header.cpr '
                         'checkpoint_out_cp/0003-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_out_cp/0003-mesh.cpr/meta_data_mesh.rd'

      # The suffixes of these files change when running in parallel or with threads
      max_parallel = 1
      max_threads = 1

      detail = "at every timestep while maintaining the most recent two files and"
    []
    [recover]
      # Gold for this test was created using checkpoint.i without any recover options
      type = Exodiff
      input = checkpoint.i
      exodiff = checkpoint_out.e
      recover = false
      max_parallel = 1
      max_threads = 1
      prereq = 'default/recover_half_transient'
      delete_output_before_running = false
      cli_args = '--recover'
      expect_out = 'Using checkpoint_out_cp/0005 for recovery'
      detail = "be capable of restarting a simulation from the output data."
    []
  []

  [block]
    requirement = "The system shall support outputting of checkpoint files, using a complete input block:"
    [recover_with_checkpoint_block_half_transient]
      # Tests that recover works when defining as a Output sub-block
      type = CheckFiles
      input = checkpoint_block.i
      cli_args = '--half-transient'
      recover = false
      detail = "at every timestep while maintaining the most recent two files and"

      check_files =      'checkpoint_block_out_cp/0004-restart-0.rd/data '
                         'checkpoint_block_out_cp/0004-restart-0.rd/header '
                         'checkpoint_block_out_cp/0004-mesh.cpr/1/header.cpr '
                         'checkpoint_block_out_cp/0004-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_block_out_cp/0004-mesh.cpr/meta_data_mesh.rd/data '
                         'checkpoint_block_out_cp/0004-mesh.cpr/meta_data_mesh.rd/header '
                         'checkpoint_block_out_cp/0005-restart-0.rd/data '
                         'checkpoint_block_out_cp/0005-restart-0.rd/header '
                         'checkpoint_block_out_cp/0005-mesh.cpr/1/header.cpr '
                         'checkpoint_block_out_cp/0005-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_block_out_cp/0005-mesh.cpr/meta_data_mesh.rd/data '
                         'checkpoint_block_out_cp/0005-mesh.cpr/meta_data_mesh.rd/header'
      check_not_exists = 'checkpoint_block_out_cp/0001-restart-0.rd '
                         'checkpoint_block_out_cp/0001-mesh.cpr/1/header.cpr '
                         'checkpoint_block_out_cp/0001-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_block_out_cp/0001-mesh.cpr/meta_data_mesh.rd '
                         'checkpoint_block_out_cp/0002-restart-0.rd '
                         'checkpoint_block_out_cp/0002-mesh.cpr/1/header.cpr '
                         'checkpoint_block_out_cp/0002-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_block_out_cp/0002-mesh.cpr/meta_data_mesh.rd '
                         'checkpoint_block_out_cp/0003-restart-0.rd '
                         'checkpoint_block_out_cp/0003-mesh.cpr/1/header.cpr '
                         'checkpoint_block_out_cp/0003-mesh.cpr/1/split-1-0.cpr '
                         'checkpoint_block_out_cp/0003-mesh.cpr/meta_data_mesh.rd'

      # The suffixes of these files change when running in parallel or with threads
      max_parallel = 1
      max_threads = 1
    []
    [recover_with_checkpoint_block]
      # Gold for this test was created using checkpoint_block.i without any recover options
      type = Exodiff
      input = checkpoint_block.i
      exodiff = checkpoint_block_out.e
      cli_args = '--recover'
      recover = false
      max_parallel = 1
      max_threads = 1
      delete_output_before_running = false
      prereq = 'block/recover_with_checkpoint_block_half_transient'
      expect_out = 'Using checkpoint_block_out_cp/0005 for recovery'
      detail = "be capable of restarting a simulation from the output data."
    []
  []
[]
