[Tests]
  design = 'modules/navier_stokes/index.md'
  [lid_driven]
    type = 'Exodiff'
    input = 'lid_driven.i'
    exodiff = 'lid_driven_out.e'
    custom_cmp = 'lid_driven.cmp'
    issues = '#000'
    requirement = 'We shall be able to solve a canonical lid-driven problem without stabilization, using mixed order \
finite elements for velocity and pressure.'
  []
  [transient_lid_driven_fsp_low_Re]
    type = 'Exodiff'
    input = 'transient_fsp.i'
    issues = '#24548'
    requirement = 'Least squares commutator (LSC) preconditioning shall require only a small number of linear iterations to converge when using Newton with a Reynolds number of unity, performing a transient march to steady-state.'
    cli_args = "n=8 mu=1 Outputs/exo/file_base=fsp_transient_low_Re"
    absent_out = 'iterations 14'
    exodiff = 'fsp_transient_low_Re.e'
    recover = false # executes on final
    petsc_version = '>=3.20.0'
  []
  [transient_lid_driven_fsp_high_Re_picard_non_ss]
    type = 'RunApp'
    input = 'transient_fsp.i'
    issues = '#24548'
    requirement = 'Least squares commutator (LSC) preconditioning shall require only a small number of linear iterations to converge when using Picard with a Reynolds number of 500, performing a few timesteps in a transient.'
    cli_args = "n=8 GlobalParams/picard=true -snes_linesearch_damping 0.4 Executioner/TimeStepper/optimal_iterations=50 -fieldsplit_others_fieldsplit_u_pc_type lu Executioner/num_steps=3 Outputs/active=''"
    absent_out = '4 iterations'
    petsc_version = '>=3.20.0'
  []
  [transient_lid_driven_fsp_high_Re_newton_ss]
    type = 'Exodiff'
    input = 'transient_fsp.i'
    issues = '#24548'
    requirement = 'Least Squares Commutator (LSC) preconditioning shall require only a small number of linear iterations to converge when using Newton with a Reynolds number of 500, performing a transient march to steady-state.'
    cli_args = "n=8 -fieldsplit_others_fieldsplit_u_pc_type lu Outputs/exo/file_base=fsp_transient_high_Re"
    absent_out = '30 iterations'
    exodiff = 'fsp_transient_high_Re.e'
    recover = false # executes on final
    petsc_version = '>=3.20.0'
  []
  [lid_driven_md]
    type = 'Exodiff'
    input = 'lid_driven_md.i'
    exodiff = 'lid_driven_md_out.e'
    custom_cmp = 'lid_driven.cmp'
    issues = '#23121'
    requirement = 'The system shall be able to solve a canonical lid-driven problem using same order variables and the PSPG/SUPG stabilization scheme.'
  []
  [steady_lid_driven_fsp_low_Re]
    requirement = 'The system shall be able to run scalable Taylor-Hood finite element simulations using a field split preconditioner with least-squares commutator preconditioning for the Schur complement and multigrid for the sub-solves, using a steady executioner with a Reynolds number of unity, and'
    issues = '#24548'
    [velocity_mass_matrix_scaling]
      type = 'Exodiff'
      input = 'steady_fsp.i'
      exodiff = 'fsp_steady_low_Re.e'
      custom_cmp = 'fsp.cmp'
      cli_args = "n=8 mu=1 Outputs/exo/file_base=fsp_steady_low_Re"
      detail = 'using the velocity mass matrix for scaling within the Least Squares Commutator preconditioner with a component variable implementation, or'
      petsc_version = '>=3.20.0'
    []
    [a_digonal_scaling]
      type = 'Exodiff'
      input = 'steady_fsp_diagonal_of_a_for_scaling.i'
      exodiff = 'steady_fsp_diagonal_of_a_for_scaling_exo.e'
      custom_cmp = 'fsp.cmp'
      cli_args = "n=8 mu=1"
      detail = 'using the diagonal of the velocity-velocity block for scaling within the Least Squares Commutator preconditioner with a component variable implementation, or'
      petsc_version = '>=3.20.0'
    []
    [vector_elman]
      type = 'Exodiff'
      input = 'steady_vector_fsp_elman.i'
      exodiff = 'steady_vector_fsp_elman_exo.e'
      detail = 'using the velocity mass matrix for scaling within the Least Squares Commutator preconditioner with a vector variable implementation, or'
      custom_cmp = 'fsp.cmp'
      petsc_version = '>=3.20.0'
    []
    [vector_olshanskii]
      type = 'Exodiff'
      input = 'steady_vector_fsp.i'
      exodiff = 'fsp_steady_low_Re_olshanskii.e'
      detail = 'commuting operators in the style of Olshanskii with a vector variable implementation.'
      custom_cmp = 'fsp.cmp'
      petsc_version = '>=3.20.0'
    []
  []
  [steady_lid_driven_fsp_high_Re]
    type = 'Exodiff'
    input = 'steady_fsp.i'
    exodiff = 'fsp_steady_high_Re.e'
    custom_cmp = 'fsp.cmp'
    issues = '#24548'
    requirement = 'The system shall be able to run scalable Taylor-Hood finite element simulations using a field split preconditioner with least-squares commutator preconditioning for the Schur complement and multigrid for the sub-solves, using a steady executioner with a Reynolds number of 500.'
    cli_args = "n=8 -fieldsplit_u_pc_type lu Outputs/exo/file_base=fsp_steady_high_Re"
    petsc_version = '>=3.20.0'
  []
  [steady_lid_driven_fsp_pressure_mass_matrix]
    requirement = 'The system shall be able to efficiently precondition Taylor-Hood finite elements using a Schur complement field split with the preconditioner for the Schur complement formed from the pressure mass matrix for a'
    issues = '#24548 #27126'
    [stokes]
      type = 'Exodiff'
      input = 'steady_vector_fsp_stokes.i'
      exodiff = 'steady_vector_fsp_stokes_exo.e'
      petsc_version = '>=3.20.0'
      detail = 'a Stokes problem and a'
    []
    [high_Re]
      type = 'Exodiff'
      input = 'steady_vector_fsp_al.i'
      exodiff = 'steady_vector_fsp_al_exo.e'
      petsc_version = '>=3.20.0'
      detail = 'a high Reynolds number (1000) Navier-Stokes problem with a grad-div stabilization.'
    []
  []
  [ad_lid_driven]
    type = 'Exodiff'
    input = 'ad_lid_driven.i'
    exodiff = 'lid_driven_out.e'
    custom_cmp = 'lid_driven.cmp'
    prereq = 'lid_driven'
    cli_args = 'Outputs/file_base=lid_driven_out'
    method = 'OPT'
    issues = '#13025'
    requirement = 'We shall be able to reproduce the results from the hand-coded lid-driven simulation using automatic differentiation objects.'
    recover = false # Same output as lid_driven
  []
  [ad_lid_driven_mean_zero_pressure]
    type = 'Exodiff'
    input = 'ad_lid_driven_mean_zero_pressure.i'
    exodiff = 'ad_lid_driven_mean_zero_pressure_out.e'
    method = 'OPT'
    issues = '#15549'
    requirement = 'We shall be able to run lid-dirven simulation using a global mean-zero pressure constraint approach.'
  []
  [ad_lid_driven_jacobian]
    type = 'PetscJacobianTester'
    input = 'ad_lid_driven.i'
    cli_args = 'Outputs/exodus=false Mesh/gen/nx=3 Mesh/gen/ny=3'
    run_sim = True
    difference_tol = 1e-7
    issues = '#13025'
    requirement = 'The Jacobian for the mixed-order INS problem shall be perfect when provided through automatic differentiation.'
  []
  [lid_driven_stabilized]
    type = 'Exodiff'
    input = 'lid_driven_stabilized.i'
    exodiff = 'lid_driven_stabilized_out.e'
    custom_cmp = 'lid_driven_stabilized.cmp'
    issues = '#9687'
    requirement = 'We shall be able to solve the lid-driven problem using equal order shape functions with pressure-stabilized petrov-galerkin stabilization. We shall also demonstrate SUPG stabilization.'
  []
  [ad_lid_driven_stabilized]
    type = 'Exodiff'
    input = 'ad_lid_driven_stabilized.i'
    exodiff = 'lid_driven_stabilized_out.e'
    custom_cmp = 'lid_driven_stabilized.cmp'
    prereq = 'lid_driven_stabilized'
    issues = '#13025'
    requirement = 'We shall be able to reproduce the hand-coded stabilized results with automatic differentiation objects.'
    recover = false # Same output as lid_driven_stabilized
    valgrind = HEAVY
  []
  [ad_lid_driven_stabilized_jacobian]
    type = 'PetscJacobianTester'
    input = 'ad_lid_driven_stabilized.i'
    run_sim = True
    cli_args = 'Outputs/exodus=false Mesh/gen/nx=3 Mesh/gen/ny=3'
    difference_tol = 1e-7
    issues = '#13025'
    requirement = 'The Jacobian for the automatic differentiation stabilized lid-driven problem shall be perfect.'
  []
  [still_unstable]
    type = 'RunApp'
    input = 'lid_driven_stabilized.i'
    expect_out = 'Aborting as solve did not converge'
    cli_args = 'GlobalParams/alpha=0 Outputs/exodus=false'
    method = 'OPT'
    issues = '#9687'
    requirement = 'Simulation with equal-order shape functions without pressure stabilization shall be unstable.'
  []
  [lid_driven_chorin]
    type = 'Exodiff'
    input = 'lid_driven_chorin.i'
    exodiff = 'lid_driven_chorin_out.e'
    issues = '#000'
    requirement = 'We shall be able to solve the INS equations using the classical Chorin splitting algorithm.'
  []

  [lid_driven_action]
    type = 'Exodiff'
    input = 'lid_driven_action.i'
    exodiff = 'lid_driven_out.e'
    custom_cmp = 'lid_driven.cmp'
    prereq = 'lid_driven'
    issues = '#15159'
    requirement = 'The system shall be able to reproduce unstabilized incompressible Navier-Stokes results with hand-coded Jacobian using a customized and condensed action syntax.'
    recover = false # Same output as lid_driven
  []
  [lid_driven_stabilized_action]
    type = 'Exodiff'
    input = 'lid_driven_stabilized_action.i'
    exodiff = 'lid_driven_stabilized_out.e'
    custom_cmp = 'lid_driven_stabilized.cmp'
    prereq = 'lid_driven_stabilized'
    issues = '#15159'
    requirement = 'The system shall be able to reproduce stabilized incompressible Navier-Stokes results with hand-coded Jacobian using a customized and condensed action syntax.'
    recover = false # Same output as lid_driven_stabilized
  []
  [ad_lid_driven_action]
    type = 'Exodiff'
    input = 'ad_lid_driven_action.i'
    exodiff = 'lid_driven_out.e'
    custom_cmp = 'lid_driven.cmp'
    method = 'OPT'
    prereq = 'ad_lid_driven'
    issues = '#15159'
    requirement = 'The system shall be able to reproduce unstabilized incompressible Navier-Stokes results with auto-differentiation using a customized and condensed action syntax.'
    recover = false # Same output as lid_driven
  []
  [ad_lid_driven_stabilized_action]
    type = 'Exodiff'
    input = 'ad_lid_driven_stabilized_action.i'
    exodiff = 'lid_driven_stabilized_out.e'
    custom_cmp = 'lid_driven_stabilized.cmp'
    prereq = 'ad_lid_driven_stabilized'
    issues = '#15159'
    requirement = 'The system shall be able to reproduce stabilized incompressible Navier-Stokes results with auto-differentiation using a customized and condensed action syntax.'
    recover = false # Same output as lid_driven_stabilized
    valgrind = HEAVY
  []
  [ad_stabilized_energy_steady]
    type = 'Exodiff'
    input = 'ad_lid_driven_stabilized_with_temp.i'
    exodiff = 'ad_lid_driven_stabilized_with_temp_out.e'
    issues = '#15500'
    requirement = 'The system shall be able to solve a steady stabilized mass/momentum/energy incompressible Navier-Stokes formulation.'
  []
  [ad_stabilized_energy_transient]
    type = 'Exodiff'
    input = 'ad_lid_driven_stabilized_with_temp_transient.i'
    exodiff = 'ad_lid_driven_stabilized_with_temp_transient_out.e'
    issues = '#15500'
    requirement = 'The system shall be able to solve a transient stabilized mass/momentum/energy incompressible Navier-Stokes formulation.'
  []
  [ad_stabilized_energy_steady_action]
    type = 'Exodiff'
    input = 'ad_lid_driven_action_stabilized_steady.i'
    exodiff = 'ad_lid_driven_action_stabilized_steady_out.e'
    issues = '#15500'
    requirement = 'The system shall be able to solve a steady stabilized mass/momentum/energy incompressible Navier-Stokes formulation with action syntax.'
  []
  [ad_stabilized_energy_transient_action]
    type = 'Exodiff'
    input = 'ad_lid_driven_action_stabilized_transient.i'
    exodiff = 'ad_lid_driven_action_stabilized_transient_out.e'
    issues = '#15500'
    requirement = 'The system shall be able to solve a transient stabilized mass/momentum/energy incompressible Navier-Stokes formulation with action syntax.'
  []
  [ad_stabilized_transient_les]
    type = 'Exodiff'
    input = 'ad_lid_driven_les.i'
    exodiff = 'ad_lid_driven_les_out.e'
    issues = '#15757'
    requirement = 'The system shall be able to solve a transient incompressible Navier-Stokes with nonlinear Smagorinsky eddy viscosity.'
  []
[]
