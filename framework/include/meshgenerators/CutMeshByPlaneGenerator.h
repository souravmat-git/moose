//* This file is part of the MOOSE framework
//* https://www.mooseframework.org
//*
//* All rights reserved, see COPYRIGHT for full restrictions
//* https://github.com/idaholab/moose/blob/master/COPYRIGHT
//*
//* Licensed under LGPL 2.1, please see LICENSE for details
//* https://www.gnu.org/licenses/lgpl-2.1.html

#pragma once
#include "MeshGenerator.h"

/**
 * This CutMeshByPlaneGenerator object is designed to trim the input mesh by removing all the
 * elements on one side of a given plane with special processing on the elements crossed by the
 * cutting line to ensure a smooth cross-section. The output mesh only consists of TET4 elements.
 */
class CutMeshByPlaneGenerator : public MeshGenerator
{
public:
  static InputParameters validParams();

  CutMeshByPlaneGenerator(const InputParameters & parameters);

  std::unique_ptr<MeshBase> generate() override;

  /// An enum class for style of input polygon size
  enum class PointPlaneRelationIndex : short int
  {
    plane_normal_side = 1,
    opposite_plane_normal_side = -1,
    on_plane = 0
  };

protected:
  /// Name of the input mesh
  const MeshGeneratorName _input_name;
  /// A point on the cutting plane
  const Point _plane_point;
  /// A normal vector of the cutting plane
  const Point _plane_normal;
  /// The boundary id of the face generated by the cut.
  boundary_id_type _cut_face_id;
  /// The boundary name of the face generated by the cut.
  const BoundaryName _cut_face_name;
  /// Reference to input mesh pointer
  std::unique_ptr<MeshBase> & _input;

  /**
   * Determine the relation between a point and a plane.
   * @param point The point of interest to be determined
   * @param plane_point A point on the plane of interest
   * @param plane_normal The normal vector of the plane of interest
   * @return an enum indicating the relation between the point and the plane
   */
  PointPlaneRelationIndex pointPlaneRelation(const Point & point,
                                             const Point & plane_point,
                                             const Point & plane_normal) const;

  /**
   * Calculate the intersection point of a plane and a line segment defined by two points separated
   * by the plane.
   * @param point1 The first point of the line segment
   * @param point2 The second point of the line segment
   * @param plane_point A point on the plane of interest
   * @param plane_normal The normal vector of the plane of interest
   * @return the intersection point of the plane and the line segment
   */
  Point pointPairPlaneInterception(const Point & point1,
                                   const Point & point2,
                                   const Point & plane_point,
                                   const Point & plane_normal) const;

  /**
   * For a TET4 elements crossed by the cutting plane, keep the part of the element on the retaining
   * side of the plane using a number of TET4 elements.
   * @param mesh The mesh to be modified
   * @param bdry_side_list A list that contains the boundary information of the original mesh
   * @param elem_id The id of the element to be cut
   * @param plane_point A point on the cutting plane
   * @param plane_normal The normal vector of the cutting plane
   * @param block_id_to_remove The subdomain id of the part of the element to be removed
   * @param new_on_plane_nodes A vector to record the pointers to the newly created nodes on the
   * cutting plane
   */
  void tet4ElemCutter(ReplicatedMesh & mesh,
                      const std::vector<libMesh::BoundaryInfo::BCTuple> & bdry_side_list,
                      const dof_id_type elem_id,
                      const Point & plane_point,
                      const Point & plane_normal,
                      const subdomain_id_type & block_id_to_remove,
                      std::vector<const Node *> & new_on_plane_nodes);

  /**
   * Check if a position on a plane has already been used as a node in the mesh. If so, return the
   * pointer to the existing node. If not, create a new node and return the pointer to the new node.
   * @param mesh The mesh to be modified
   * @param new_on_plane_nodes A vector to record the pointers to the newly created nodes on the
   * cutting plane
   * @param new_point The position of the potential new node
   * @return a pointer to the existing node or the newly created node
   */
  const Node * nonDuplicateNodeCreator(ReplicatedMesh & mesh,
                                       std::vector<const Node *> & new_on_plane_nodes,
                                       const Point & new_point);
};
